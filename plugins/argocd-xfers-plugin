#!/usr/bin/bash

POSSIBLE_ENV_VARS=(
    "HELM_REPO_URL"
    "HELM_CHART"
    "HELM_CHART_VERSION"
    "HELM_VALUE_FILES"
    "HELM_VALUES"
)

logger() {
    [ -e /tmp/process.log ] || touch /tmp/process.log
    echo "[`date +"%Y-%m-%d %H:%M:%S"`] $1" >> /tmp/process.log
}

# sanitize ARGOCD_ENV_<env. variable> to <env. variable>
# ArgoCD will add `ARGOCD_ENV_` prefix for env. variables since v2.4
sanitize_env_var() {
    local argocd_env_var_name=ARGOCD_ENV_$1
    local argocd_env_var_name_val=${!argocd_env_var_name}
    [ "x$argocd_env_var_name_val" == "x" ] || eval "$1=$argocd_env_var_name_val"
}

# sanitize all possible env. variables
for env_var in ${POSSIBLE_ENV_VARS[@]}; do
    sanitize_env_var $env_var
    logger "$env_var=${!env_var}"
done

# pull helm chart from specify helm repo and helm chart
helm pull --untar --repo $HELM_REPO_URL $HELM_CHART --version $HELM_CHART_VERSION > /dev/null 2>&1 || exit 1

# check if helm chart folder exists
[ -d $HELM_CHART ] || exit 1
[ -d "$HELM_CHART-$HELM_CHART_VERSION.tgz" ] || exit 1

# parse HELM_VALUE_FILES into arguments
ARGS=""
for value_file in $HELM_VALUE_FILES; do
    [ -f $value_file ] || continue
    ARGS="$ARGS -f $value_file"
done

# parse HELM_VALUES into arguments
for value in $HELM_VALUES; do
    # need to set image.tag as STRING value to avoid tag value is pure digits
    if [[ $value == image.tag* ]]; then
        ARGS="$ARGS --set-string $value"
    else
        ARGS="$ARGS --set $value"
    fi
done
logger "ARGS: ${ARGS}"

helm template --include-crds $ARGOCD_APP_NAME ./$HELM_CHART $ARGS | tee /tmp/helm_template.log
logger "helm template exit code: $?"
